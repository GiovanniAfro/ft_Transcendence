services:
    # SECRETS-SEGMENT ----------------------------------------------------------->
    vault:
        profiles:
            - secrets
        container_name: vault
        image: bitnami/vault:1.17.5
        environment:
            VAULT_ADDR: https://10.0.0.1:8200
            VAULT_CACERT: /bitnami/vault/tls/intermediate.cert.pem
        ports:
            - 8200:8200
        volumes:
            - vault:/bitnami/vault
        networks:
            secrets:
                ipv4_address: 10.0.0.1
        cap_add:
            - IPC_LOCK
        logging:
            driver: gelf
            options:
                gelf-address: "udp://10.0.2.2:5000"
                tag: "vault"
        restart: always
        entrypoint: vault server -config=/bitnami/vault/config/vault.hcl

    # APP-SEGMENT ------------------------------------------------------------->
    # django:
    #     profiles:
    #         - app
    #     container_name: django
    #     build:
    #         context: ./services/app/django
    #         dockerfile: Dockerfile
    #     environment:
    #         SECRET_KEY: ${SECRET_KEY} 
    #         ALLOWED_HOSTS: ${ALLOWED_HOSTS} 
    #         POSTGRES_DB: ${POSTGRES_DB}
    #         POSTGRES_USER: ${POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #         DB_HOST: ${DB_HOST} 
    #         DB_PORT: ${DB_PORT} 
    #         DJANGO_ADMIN_USER: ${DJANGO_ADMIN_USER} 
    #         DJANGO_ADMIN_PASS: ${DJANGO_ADMIN_PASS} 
    #     ports:
    #         - "8000:8000"
    #     # volumes:
    #     #     -
    #     networks:
    #         app:
    #             ipv4_address: 10.0.1.1
    #     logging:
    #         driver: gelf
    #         options:
    #             gelf-address: "udp://10.0.2.2:5000"
    #             tag: "django"
    #     restart: always
    #     depends_on:
    #         - postgres

    postgresql:
        profiles:
            - app
        container_name: postgresql
        build:
            context: ./services/app/postgresql
            dockerfile: Dockerfile
        environment:
            POSTGRESQL_VAULT_TOKEN: ${POSTGRESQL_VAULT_TOKEN}
        volumes:
            - postgresql:/bitnami
        networks:
            app:
                ipv4_address: 10.0.1.2
        logging:
            driver: gelf
            options:
                gelf-address: "udp://10.0.2.2:5000"
                tag: "postgresql"
        restart: always
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    # LOG-SYSTEM-SEGMENT ------------------------------------------------------>
    elasticsearch:
        profiles:
            - log-system
        container_name: elasticsearch
        build:
            context: ./services/log-system/elasticsearch/
        environment:
            ELASTICSEARCH_VAULT_TOKEN: ${ELASTICSEARCH_VAULT_TOKEN}
        volumes:
            - elasticsearch:/bitnami
        ports:
            - 9200:9200
        networks:
            log-system:
                ipv4_address: 10.0.2.1
        restart: unless-stopped
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    logstash:
        profiles:
            - log-system
        container_name: logstash
        build:
            context: ./services/log-system/logstash
        environment:
            LOGSTASH_VAULT_TOKEN: ${LOGSTASH_VAULT_TOKEN}
        volumes:
            - logstash:/bitnami
        networks:
            log-system:
                ipv4_address: 10.0.2.2
        restart: unless-stopped
        depends_on:
            - elasticsearch
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    kibana:
        profiles:
            - log-system
        container_name: kibana
        build:
            context: ./services/log-system/kibana
        environment:
            KIBANA_VAULT_TOKEN: ${KIBANA_VAULT_TOKEN}
        volumes:
            - kibana:/bitnami
        ports:
            - 5601:5601
        networks:
            log-system:
                ipv4_address: 10.0.2.3
        restart: unless-stopped
        depends_on:
            - logstash
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"
    
    # MONITOR-SYSTEM-SEGMENT -------------------------------------------------->
    prometheus:
        profiles:
            - monitor-system
        container_name: prometheus
        build:
            context: ./services/monitor-system/prometheus
        environment:
            PROMETHEUS_VAULT_TOKEN: ${PROMETHEUS_VAULT_TOKEN}
        volumes:
            - prometheus:/bitnami
        ports:
            - 9090:9090
        networks:
            monitor-system:
                ipv4_address: 10.0.3.1
        restart: unless-stopped
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    grafana:
        profiles:
            - monitor-system
        container_name: grafana
        build:
            context: ./services/monitor-system/grafana
        environment:
            GRAFANA_VAULT_TOKEN: ${GRAFANA_VAULT_TOKEN}
        volumes:
            - grafana:/bitnami
        ports:
            - 3000:3000
        networks:
            monitor-system:
                ipv4_address: 10.0.3.2
        restart: unless-stopped
        depends_on:
            - prometheus
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    postgres-exporter:
        profiles:
            - monitor-system
        container_name: postgres-exporter
        build:
            context: ./services/monitor-system/postgres-exporter
        ports:
            - "9187:9187"
        environment:
            POSTGRES_EXPORTER_VAULT_TOKEN: ${POSTGRES_EXPORTER_VAULT_TOKEN}
        networks:
            monitor-system:
                ipv4_address: 10.0.3.4
        restart: unless-stopped
        depends_on:
            - prometheus
        entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"
    
    # nginx-exporter:
    #     profiles:
    #         - monitor-system
    #     container_name: nginx-exporter
    #     build:
    #         context: ./services/monitor-system/nginx-exporter
    #     ports:
    #         - "9113:9113"
    #     environment:
    #         NGINX_EXPORTER_VAULT_TOKEN: ${NGINX_EXPORTER_VAULT_TOKEN}
    #     networks:
    #         monitor-system:
    #             ipv4_address: 10.0.3.3
    #     restart: unless-stopped
    #     depends_on:
    #         - prometheus
    #     entrypoint: bash -c "source /entrypoint/entrypoint_wrapper.sh"

    # PROXY-WAF-SEGMENT ------------------------------------------------------->
    nginx:
        profiles:
            - proxy-waf
        container_name: nginx
        build:
            context: ./services/proxy-waf/nginx
            dockerfile: Dockerfile
        environment:
            NGINX_VAULT_TOKEN: ${NGINX_VAULT_TOKEN}
        ports:
            - "80:8080"
            - "443:8443"
        networks:
            proxy-waf:
                ipv4_address: 10.0.4.1
        logging:
            driver: gelf
            options:
                gelf-address: "udp://10.0.2.2:5000"
                tag: "nginx"
        restart: always

volumes:
    vault:
        external: true

    django:

    postgresql:

    elasticsearch:

    logstash:

    kibana:

    prometheus:

    grafana:

    nginx:

networks:
    secrets:
        name: secrets
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.0.0/24
                  gateway: 10.0.0.254

    app:
        name: app
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.1.0/24
                  gateway: 10.0.1.254

    log-system:
        name: log-system
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.2.0/24
                  gateway: 10.0.2.254

    monitor-system:
        name: monitor-system
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.3.0/24
                  gateway: 10.0.3.254

    proxy-waf:
        name: proxy-waf
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.4.0/24
                  gateway: 10.0.4.254
