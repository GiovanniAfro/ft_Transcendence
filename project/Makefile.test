# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: kichkiro <kichkiro@student.42firenze.it    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/12 14:53:55 by kichkiro          #+#    #+#              #
#    Updated: 2024/07/04 20:37:08 by kichkiro         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Config ---------------------------------------------------------------------->

.PHONY: all up down start stop clean fclean re setup_firewall setup_elasticsearch
.SILENT:

IMAGES?=

NETWORKS = proxy-waf app log-system monitor-system
VOLUMES = db elasticsearch
CONTAINERS = nginx, django, postgres, elasticsearch, logstash, kibana

WHITE_BOLD=\033[1;37m
BLUE=\033[0;34m
NC=\033[0m

# Defines --------------------------------------------------------------------->

define create_network
	@if ! docker network ls --format '{{.Name}}' | grep -w $(1) > /dev/null 2>&1; then \
		docker network create --subnet=$(2) --gateway=$(3) $(1) > /dev/null 2>&1; \
		echo "$(BLUE)    Network $(WHITE_BOLD)$(1) $(BLUE)created$(NC)"; \
	else \
		echo "$(BLUE)    Network $(WHITE_BOLD)$(1) $(BLUE)already exists$(NC)"; \
	fi
endef

define create_volume
	@if ! docker volume ls --format '{{.Name}}' | grep -w $(1)> /dev/null 2>&1; then \
		docker volume create $(1) > /dev/null 2>&1; \
		echo "$(BLUE)    Volume $(WHITE_BOLD)$(1) $(BLUE)created$(NC)"; \
	else \
		echo "$(BLUE)    Volume $(WHITE_BOLD)$(1) $(BLUE)already exists$(NC)"; \
	fi
endef

define build_image
	@docker build -t $(1) $(2); \
	echo "$(BLUE)    Image $(WHITE_BOLD)$(1) $(BLUE)built$(NC)"
endef

define start_container
	@if [ ! "$(shell docker ps -q -f name=$(1))" ]; then \
		docker run -d \
			--name $(1) \
			--network $(2) \
			--ip $(3) \
			--restart $(4) \
			--env-file .env \
			$(5) \
			$(6); \
		echo "$(BLUE)    Container $(WHITE_BOLD)$(1) $(BLUE)started$(NC)"; \
	else \
		echo "$(BLUE)    Container $(WHITE_BOLD)$(1) $(BLUE)already running$(NC)"; \
	fi
endef

# Rules ----------------------------------------------------------------------->

all: up

up:
	@echo "\n$(BLUE)[+] Creating networks$(NC)"
	$(call create_network,proxy-waf,10.0.0.0/24,10.0.0.254)
	$(call create_network,app,10.0.1.0/24,10.0.1.254)
	$(call create_network,log-system,10.0.2.0/24,10.0.2.254)
	$(call create_network,monitor-system,10.0.3.0/24,10.0.3.254)
	$(call create_network,secrets,10.0.4.0/24,10.0.4.254)
	@echo "\n$(BLUE)[+] Creating volumes$(NC)"
	$(call create_volume,db)
	$(call create_volume,elasticsearch)
	@echo "\n$(BLUE)[+] Building images$(NC)"
	$(call build_image,nginx,./requirements/nginx)
	$(call build_image,django,./requirements/django)
	$(call build_image,postgres,./requirements/postgres)
	$(call build_image,elasticsearch,./requirements/elasticsearch)
	$(call build_image,logstash,./requirements/logstash)
	$(call build_image,kibana,./requirements/kibana)
	@echo "\n$(BLUE)[+] Starting containers$(NC)"
	$(call start_container,nginx,proxy-waf,10.0.0.1,always,"-p 8080:8080 -p 8443:8443" "nginx_image")
	$(call start_container,django,app,10.0.1.1,always,"-p 8000:8000" "django_image")
	$(call start_container,postgres,app,10.0.1.2,always,"" "postgres_image")
	$(call start_container,elasticsearch,log-system,10.0.2.1,unless-stopped,"-p 9200:9200" "elasticsearch_image")
	$(call start_container,logstash,log-system,10.0.2.2,unless-stopped,"-p 50000:50000/udp -p 9600:9600" "logstash_image")
	$(call start_container,kibana,log-system,10.0.2.3,unless-stopped,"-p 5601:5601" "kibana_image")


